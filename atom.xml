<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Disp. Nil.]]></title>
  <link href="http://zhzhzoo.github.io/atom.xml" rel="self"/>
  <link href="http://zhzhzoo.github.io/"/>
  <updated>2013-12-31T03:15:02+08:00</updated>
  <id>http://zhzhzoo.github.io/</id>
  <author>
    <name><![CDATA[zhzhzoo]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[一个 0-1 序列上的游戏]]></title>
    <link href="http://zhzhzoo.github.io/blog/2013/12/a-0-1-sequence-game/"/>
    <updated>2013-12-30T23:44:00+08:00</updated>
    <id>http://zhzhzoo.github.io/blog/2013/12/a-0-1-sequence-game</id>
    <content type="html"><![CDATA[<p>在乒乓球队群里有人发了一个有趣的面试题目，我和<a href="http://tieba.baidu.com/f?kw=%C1%F5%CA%AB%CF%F6" title="刘诗霄">@刘诗霄</a>（经过一段艰苦卓绝的挣扎）把它讨论出来了。（涛神用了五分钟就想出来了，他的做法我听不懂……）</p>

<h1>游戏</h1>

<p>规则如下：</p>

<ul>
<li>有<code>n</code>个数从左到右排成一列，它们每一个是<code>0</code>或<code>1</code>；</li>
<li>每次划掉最右边的数，再在最左边写上一个新的数；</li>
<li>如果划掉的是<code>1</code>，由你决定最左边写的是<code>0</code>还是<code>1</code>；</li>
<li>如果划掉的是<code>0</code>，老天决定最左边写的是<code>0</code>还是<code>1</code>（刘诗霄：不要紧张，不是概率问题。。。）；</li>
</ul>


<p>现在，你想把这一列数变成全部相等的，而老天千方百计阻止你这么做。那么，最后是人会赢呢，还是天会赢呢？</p>

<h1>一些小情况</h1>

<p>规则不复杂，但是题目还是有点儿复杂，我们先来看一下<code>n</code>比较小的情况。</p>

<p>首先，为了说话方便，我们把规则换个说法：</p>

<ul>
<li>有<code>n</code>个数从左到右拍成一列，它们每一个是<code>0</code>或<code>1</code>；</li>
<li>每次从右到左考虑每个数，把它擦掉，之后：</li>
<li>如果它是<code>1</code>，你根据兴趣写上<code>0</code>或<code>1</code>；</li>
<li>如果它是<code>0</code>，老天根据兴趣写上<code>0</code>或<code>1</code>。</li>
<li>如果左边到头了，再从右边开始。</li>
</ul>


<p>显然它和换之前是一样的。</p>

<h2>n = 1</h2>

<p>初始状态有两种，分别是：</p>

<pre><code>0
</code></pre>

<p>和</p>

<pre><code>1
</code></pre>

<p>无论哪一种老天都要输。</p>

<h2>n = 2</h2>

<p>初始状态有<code>4</code>种，分别是：</p>

<pre><code>00
</code></pre>

<p>老天输。</p>

<pre><code>11
</code></pre>

<p>老天输。</p>

<pre><code>01
</code></pre>

<p>老天输，因为我把最右边的<code>1</code>写成<code>0</code>就赢了。</p>

<pre><code>10
</code></pre>

<p>老天输，因为不管老天把那个<code>0</code>写成什么，结果都是归结到之前的情况。</p>

<p>情况太多了，一个个看不完，直接看</p>

<h2>n = 5</h2>

<p>的吧。</p>

<p>如果我开始只有一个<code>1</code>呢，比如这样：</p>

<pre><code>00010
    ^
</code></pre>

<p>为了记住现在该动哪个数了，我加了个标记。</p>

<p>如果老天不动：</p>

<pre><code>00010
   ^
</code></pre>

<p>我也不动：</p>

<pre><code>00010
  ^
</code></pre>

<p>要是老天还不动呢：</p>

<pre><code>00010
 ^
</code></pre>

<p>还是不动：</p>

<pre><code>00010
^
</code></pre>

<p>岿然不动：</p>

<pre><code>00010
    ^
</code></pre>

<p>Z<sup>Z<sup>Z</sup></sup>Z<sup>Z<sup>Z</sup></sup>：</p>

<pre><code>00010
   ^
</code></pre>

<p>我就动：</p>

<pre><code>00000
  ^
</code></pre>

<p>老天输啦！</p>

<p>老天表示他要动一动，我们回到比如说这一步：</p>

<pre><code>00010
  ^
</code></pre>

<p>老天动啦：</p>

<pre><code>00110
 ^
</code></pre>

<p>老天又动啦：</p>

<pre><code>01110
^
</code></pre>

<p>接着动：</p>

<pre><code>11110
    ^
</code></pre>

<p>还是要动：</p>

<pre><code>11111
   ^
</code></pre>

<p>他又输了<code>T_T~Oo..</code>。</p>

<p>这回不要动那么多啦：</p>

<pre><code>00010
  ^
</code></pre>

<p>这个就不动了：</p>

<pre><code>00010
 ^
</code></pre>

<p>这儿呢……动一下吧：</p>

<pre><code>01010
^
</code></pre>

<p>然后一直不动：</p>

<pre><code>01010
   ^
</code></pre>

<p>该我了，我一定要动：</p>

<pre><code>01000
  ^
</code></pre>

<p>老天不得不动了：</p>

<pre><code>01100
 ^
</code></pre>

<p>那我就不动啦：</p>

<pre><code>01100
^
</code></pre>

<p>老天如果聪明，这里它不会动的：</p>

<pre><code>01100
    ^
</code></pre>

<p>不得不动了：</p>

<pre><code>01101
   ^
</code></pre>

<p>这里也是不动为妙：</p>

<pre><code>01101
  ^
</code></pre>

<p>我也不动为妙：</p>

<pre><code>01101
^
</code></pre>

<p>老天若不认输，也是不会动的：</p>

<pre><code>01101
    ^
</code></pre>

<p>啊，这回我动一动：</p>

<pre><code>01100
   ^
</code></pre>

<p>老天非动不可了：</p>

<pre><code>01110
  ^
</code></pre>

<p>那我就不动啦：</p>

<pre><code>01110
^
</code></pre>

<p>老天现在动也不是，不动也不是，认输啦！</p>

<h1>一般情况</h1>

<p>其实从头想起来这道题不是特别特别好想呢。不过已经想出来了，就很难装作不会的样子从头想，还是讲答案吧~</p>

<p>这是一串数：</p>

<pre><code>xxxxxxxxxxxxxx..........xxxxxxxxxxxx
                                   ^
</code></pre>

<p>从最右边开始，要是碰见了一个<code>1</code>：</p>

<pre><code>xxxxxxxxx......xxxxx1xxx......xxxxxx
                    ^ 
</code></pre>

<p>我动不动呢？这取决于之前是不是有过一个<code>0</code>，被老天动成<code>1</code>了：</p>

<pre><code>xxxxxxxxx......xxxxx1xxx......xx0xxx
                                ^
xxxxxxxxx......xxxxx1xxx......xx1xxx
                               ^
</code></pre>

<p>要是有我就不动：</p>

<pre><code>xxxxxxxxx......xxxxx1xxx......xx1xxx
                   ^
</code></pre>

<p>否则我就动：</p>

<pre><code>xxxxxxxxx......xxxxx0xxx......xx0xxx
                   ^
</code></pre>

<p>让我们来证明我会赢，为了证明它，我们要用到“字典序”。所谓“字典序”，就是一个相同位数的 0-1 串之间的线性序，定义为把两个串看成十进制数得到的大小关系。比如<code>1001</code>就比<code>0100</code>大，
<code>11010111</code>比<code>11010101</code>大。</p>

<p>那么，我照这个策略操作，老天有何感想？首先它每轮至少得动一个数，要不这些数就全成<code>0</code>了。然后，就没有然后了。因为老天把一个<code>0</code>动成了<code>1</code>，而这之前的<code>1</code>都没有变成<code>0</code>。那么，得到的0-1串会比原来大。而0-1串又是有限的，它不会一直变大下去，这些数就都成<code>0</code>或<code>1</code>啦~</p>

<p>所谓“人定胜天”？不知道为什么出题人让人来进攻，天来防守。要是倒过来不就得听天由命了嘛？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[百年讲堂的新演出提醒]]></title>
    <link href="http://zhzhzoo.github.io/blog/2013/10/pku-hall-scout/"/>
    <updated>2013-10-25T19:34:00+08:00</updated>
    <id>http://zhzhzoo.github.io/blog/2013/10/pku-hall-scout</id>
    <content type="html"><![CDATA[<p>开学，我就发现了两件事情：</p>

<ul>
<li>北大同学们对文艺有着浓厚的兴趣。</li>
<li>我没法及时得知百年讲堂门口的海报和售票处公告栏的更新。</li>
</ul>


<p>我能发现这两点，是因为每到百讲门口，我会发现20元的演出票都卖完了。名气越大，票卖得越快。像新年音乐会，我听说时已只剩80元的票了。好在吉他、戏剧、室内乐总卖不完，我能买到票。于是我得想办法第一时间知道新演出消息，要不然每次至少得多掏20块钱。</p>

<h2>推送到 Notification Center</h2>

<p>Mac OS X 拥有一个消息中心，应用程序们可以在上面发布提醒。比如，
Transmit 或迅雷下载完成时，Mail 收到新邮件时，屏幕右上角会弹出一个气泡，并且屏幕右边的通知区域（用二指从触摸板右边界滑入以打开）会显示这条通知，直到你点它或关掉它。</p>

<p>我在打 Notification Center 的主意，把演出信息直接推送到那里多好。当然要先搜索 Notification Center 的 API 了，搜索时，百度给了我一个利用消息中心显示 RSS 标题的<a href="http://www.appinn.com/reader-notifier/" title="Reader Notifier – 通知中心 RSS 客户端[OSX]">小软件</a>。那么，我还是做一个抓取页面并生成 RSS Feed 的服务器端脚本吧，既然剩下的那一半已经有人做好了嘛。</p>

<p><img src="http://zhzhzoo.github.io/graphics/0/RSS-scout-Final.png" title="效果图" alt="效果图" /></p>

<h2>从一个网页生成 RSS</h2>

<p>现在国内国外的网上飘着大朵大朵的云，随便抓一朵，就够我这个小脚本受用了。不过，我在搜索 RSS 格式标准时，发现这个小脚本也不用自己手写。</p>

<p><a href="http://feed43.com/" title="Feed43 : Convert any web page to news feed on the fly">Feed 43</a> 是一个帮你抓取网页，生成 RSS Feed 的网站。我在点开它之前，想不通它是怎么分析页面的结构的，它怎么能把每个页面都分条归类做成 RSS Feed 呢？打开之后，我发现答案好简单粗暴：它根本不会分，你得告诉它。</p>

<p><img src="http://zhzhzoo.github.io/graphics/0/Feed43-Step1.png" title="第一步" alt="第一步" /></p>

<p>打开网页，点创建 Feed，同意使用协议。第一步要输入抓去页面的 url，稍等片刻，待网页抓到手，下面的框里会显示它的源码。这里不得不吐槽一句：北大百年讲堂的订票页面明明是 UTF-8 编码的，源码里非得写是
gb2312，误导我了。</p>

<p><img src="http://zhzhzoo.github.io/graphics/0/Feed43-Step2.png" title="第二步" alt="第二步" /></p>

<p>第二步，我们得告诉网站该怎么把消息分条。办法很简单，就是<a href="http://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" title="正则表达式 - 维基百科，自由的百科全书">正则表达式</a>。这个网站根据一个简化的正则表达式来匹配页面，对每次成功匹配生成一条新消息。Global Search Pattern 的匹配执行一次，匹配到的文本会被送给 Item (repeatable) Search Pattern 反复匹配，每次匹配的文本分别摘出。</p>

<p>这个简化的正则表达式很简单，只有四个特殊符号 <code>{\%}</code>, <code>{*}</code>,
<code>{_}</code>, <code>{|}</code>。<code>{\%}</code>匹配任意字符串，并把匹配到的摘出。
<code>{*}</code>也匹配任意字符串。<code>{_}</code>匹配含换行在内的一串空白符，
<code>{|}</code>匹配换行。后三个特殊符号匹配到的字符串都会被丢弃，不会计入最后的结果。</p>

<p>比如，上图就是用来匹配百年讲堂卖票网的模式串以及它匹配到的信息。</p>

<p><img src="http://zhzhzoo.github.io/graphics/0/Feed43-Step3.png" title="第三步" alt="第三步" /></p>

<p>第三步，我们把摘出来的每条信息编进 RSS 里。根据这个网站的分法，
RSS 的每一条好像分成标题、链接和内容三个部分，我们把刚才摘出来的信息，按它们的代号，分别填进去就好啦。下面可以看效果，调一调。</p>

<p>这样就好啦，这个网站给了我们一个 xml 链接，它就是我想要的百讲演出 RSS Feed。免费用户的 RSS 只能（最多）每六小时刷新一次，我这里应该是够用了。</p>

<h2>看一看效果</h2>

<p>最后，把 xml 链接填进 RSS 通知器的设置里，它会每过一段时间帮我们查查演出信息有没有更新的。Feed43 强烈建议我们把检查的间隔设得和六小时在一个数量级，不过我没太敢，因为它的服务器经常因为负荷太高而拒绝服务，而且我也不知道我的 RSS 通知器在发现出错后会不会作出“穷寇莫追”的选择。</p>

<p><img src="http://zhzhzoo.github.io/graphics/0/Notifier-Settings.png" title="通知器的设置" alt="通知器的设置" /></p>

<p>今天的问题解决了，而且没写脚本，真好。只是有一个问题，做 RSS Feed
的网站不知道每条消息是什么时候更新的，我只能寄希望于我的 RSS 通知器会存下每一条消息，知道抓下的消息里有没有没出现过的。</p>

<p>百年讲堂的票务好像是“中演票务通”代理的，它应该给网站加一个功能：根据搜索条件生成对应的 RSS Feed。不过我也不强求啦。</p>
]]></content>
  </entry>
  
</feed>
